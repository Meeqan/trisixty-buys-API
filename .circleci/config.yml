default: &defaults
  docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7.1
        environment:
          PROJECT_PATH: /home/circleci/yard-it-api
          CC_TEST_REPORTER_ID: ${CC_TEST_REPORTER_ID}
          FLASK_ENV: testing
          FLASK_APP: manage.py
          BASE_URL: /api/v1
          TEST_DATABASE_URI: postgresql://root@localhost/yardit_test

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: postgres:9.6
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: yardit_test
          POSTGRES_PASSWORD: ''

  # specify working directory
  working_directory: ~/yard-it-api


attach_workspace: &cmd_attach_workspace
  attach_workspace:
    at: ~/yard-it-api/tmp


install_dependencies: &cmd_install_dependencies
  run:
    name: Install dependencies
    command: |
      python3 -m pip install pipenv==2018.11.26
      python3 -m pipenv install


wait_for_postgres: &cmd_wait_for_postgres
  run:
    name: Waiting for Postgres to be ready
    command: |
      dockerize -wait tcp://localhost:5432 -timeout 1m

download_cc_test_reporter: &cmd_download_cc_test_reporter
  run:
    name:  Download cc-test-reporter
    command: |
      mkdir -p tmp/
      curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > /tmp/cc-test-reporter
      chmod +x /tmp/cc-test-reporter

save_cache: &cmd_save_cache
    save_cache:
        key: api-dependencies-{{ checksum "Pipfile.lock" }}
        paths:
          - $(python3 -m pipenv --venv)

restore_cache: &cmd_restore_cache
    restore_cache:
        keys:
          - api-dependencies-{{ checksum "Pipfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - api-dependencies-



# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      # Download and cache dependencies
      - *cmd_save_cache
      - *cmd_install_dependencies
      - *cmd_wait_for_postgres

      - run:
          name: Set up database
          command: |
            source $(python3 -m pipenv --venv)/bin/activate
            flask db upgrade

      - *cmd_download_cc_test_reporter


  run_tests:
    <<: *defaults
    steps:
      - checkout
      - *cmd_attach_workspace
      - *cmd_install_dependencies
      - *cmd_save_cache
      - *cmd_wait_for_postgres
      - *cmd_restore_cache
      - *cmd_download_cc_test_reporter
      - run:
          name: run tests
          command: |
            source $(python3 -m pipenv --venv)/bin/activate
            pytest
            /tmp/cc-test-reporter format-coverage coverage.xml -t "coverage.py" -o "tmp/cc.testreport.json"

      - persist_to_workspace:
          root: tmp
          paths:
            - cc.testreport.json

  upload_coverage:
    <<: *defaults
    steps:
      - checkout
      - *cmd_download_cc_test_reporter
      - *cmd_attach_workspace
      - run:
          name: Upload coverage results to Code Climate
          command: |
            /tmp/cc-test-reporter upload-coverage -i tmp/cc.testreport.json


      - store_artifacts:
          path: test-reports
          destination: test-reports



workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - run_tests:
          requires:
          - build
      - upload_coverage:
          requires:
            - run_tests
            - build